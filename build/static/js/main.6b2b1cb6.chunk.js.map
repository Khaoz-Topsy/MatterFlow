{"version":3,"sources":["helper/guidHelper.ts","components/sidebar/index.tsx","helper/randomHelper.ts","constants/guidSection.ts","components/logo/logo1.tsx","components/logo/index.tsx","components/main/main1.tsx","components/main/main2.tsx","components/main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getGuidSection","guid","sectionNum","startingPoint","console","log","substring","randomGuid","randomInt","Math","random","tempGuidString","floor","toString","numToPad","length","result","padIndex","Sidebar","props","className","style","width","src","onClick","document","querySelector","classList","toggle","alt","fontWeight","seedrandom","require","randomFromSeed","randomSeed","maxNumber","func","ex","getIndex","numPossibilities","rando","maxPossibilities","index","round","selectedIndex","GuidSection","Logo","Main","MainImage","Logo1","id","Main1","imageIndex","backgroundImage","Main2","App","state","this","href","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b2b1cb6.chunk.js","sourcesContent":["const guidSectionLength = 3;\r\n\r\nexport const maxPossibilities = 1000;\r\n\r\nexport const getGuidSection = (guid: string, sectionNum: number) => {\r\n    const startingPoint = (sectionNum * guidSectionLength) + sectionNum;\r\n    console.log(guid.substring(startingPoint, (startingPoint + guidSectionLength)));\r\n    return guid.substring(startingPoint, (startingPoint + guidSectionLength));\r\n}\r\n\r\nexport const randomGuid = () => {\r\n    const randomInt = Math.random() * 999;\r\n    const tempGuidString = Math.floor(randomInt).toString();\r\n    const numToPad = guidSectionLength - tempGuidString.length;\r\n    let result = '';\r\n    for (let padIndex = 0; padIndex < numToPad; padIndex++) {\r\n        result += '0';\r\n    }\r\n    result += tempGuidString;\r\n    return result;\r\n}\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    guid: string;\r\n}\r\n\r\nexport const Sidebar = (props: IProps) => {\r\n    const onClick = () => {\r\n        document.querySelector(\".sidebar\")?.classList.toggle(\"open\");\r\n        document.querySelector(\".sidebar-toggle\")?.classList.toggle(\"open\");\r\n    }\r\n    return (\r\n        <>\r\n            <img className=\"sidebar-toggle\" style={{ width: '50px' }} src=\"assets/img/menu.webp\" onClick={onClick} alt=\"menu\" />\r\n            <div className=\"sidebar\">\r\n                <div className=\"content\">\r\n                    <div className=\"sidebar-header\">\r\n                        <p>Current Seed<br /><span style={{ fontWeight: 'bold' }}>{props.guid}</span></p>\r\n                        <hr />\r\n                        {/* <input value={props.guid} /> */}\r\n                        <small>This key is unique to you, it changes the way the website is loaded for you. This page is most likely unique to you</small>\r\n                    </div>\r\n                    {/* <div className=\"sidebar-body\">\r\n                        <ul>\r\n                            <li>Home</li>\r\n                            <li>Test</li>\r\n                        </ul>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","\r\n// import * as seedrandom from 'seedrandom';\r\nconst seedrandom = require('seedrandom');\r\n\r\nexport const randomFromSeed = (randomSeed: string, maxNumber: number) => {\r\n    try {\r\n        const func = seedrandom(randomSeed);\r\n        return func() * maxNumber;\r\n    } catch (ex) {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport const getIndex = (numPossibilities: number, rando: number, maxPossibilities: number): number => {\r\n    let index = Math.round((rando / maxPossibilities) * numPossibilities);\r\n    console.log('randomHelper', { index })\r\n\r\n    let selectedIndex = 0;\r\n    if (index <= numPossibilities) selectedIndex = index;\r\n    return selectedIndex;\r\n}","export class GuidSection {\r\n    static Logo: number = 0;\r\n    static Main: number = 1;\r\n    static MainImage: number = 2;\r\n}","import React from 'react';\r\n\r\nexport const Logo1 = () => {\r\n    return (\r\n        <section id=\"logo\">\r\n            <img src=\"assets/img/logo.png\" alt=\"logo\" />\r\n            <h2>Your flow is what matters</h2>\r\n        </section>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport { randomFromSeed, getIndex } from '../../helper/randomHelper';\r\nimport { maxPossibilities, getGuidSection } from '../../helper/guidHelper';\r\n\r\nimport { GuidSection } from '../../constants/guidSection';\r\n\r\nimport { Logo1 } from './logo1';\r\n\r\ninterface IProps {\r\n    guid: string;\r\n}\r\n\r\nexport const Logo = (props: IProps) => {\r\n    const randomSeed = getGuidSection(props.guid, GuidSection.Logo);\r\n    const rando: number = randomFromSeed(randomSeed, maxPossibilities);\r\n\r\n    console.log('Logo', { rando });\r\n    const numPossibilities = 1;\r\n    const selectedIndex = getIndex(numPossibilities, rando, maxPossibilities);\r\n\r\n    switch (selectedIndex) {\r\n        case 0:\r\n        default:\r\n            return <Logo1 />;\r\n        // case 1:\r\n        //     return <h1 />;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { getGuidSection, maxPossibilities } from '../../helper/guidHelper';\r\nimport { randomFromSeed, getIndex } from '../../helper/randomHelper';\r\n\r\nimport { GuidSection } from '../../constants/guidSection';\r\n\r\n\r\ninterface IProps {\r\n    guid: string;\r\n}\r\n\r\nexport const Main1 = (props: IProps) => {\r\n    const randomSeed = getGuidSection(props.guid, GuidSection.MainImage);\r\n    const rando: number = randomFromSeed(randomSeed, maxPossibilities);\r\n\r\n    console.log('Main1', { rando });\r\n    const numImages = 3;\r\n    const imageIndex = getIndex(numImages, rando, maxPossibilities);\r\n    return (\r\n        <section id=\"main\" style={{ backgroundImage: `url(/assets/img/screen${imageIndex}.jpg)` }}>\r\n            <div className=\"mainGrid\">\r\n                <div className=\"item1\">\r\n                    <p>Procedurally generated Space Stations</p>\r\n                    <p>Procedurally generated Space Ships</p>\r\n                    <p>Procedurally generated Weapons</p>\r\n                    <p>Procedurally generated Chairs!</p>\r\n                    <p>Procedurally generated Space Stations</p>\r\n                </div>\r\n                <div className=\"item2\"></div>\r\n                <div className=\"item3\"></div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport { getGuidSection, maxPossibilities } from '../../helper/guidHelper';\r\nimport { randomFromSeed, getIndex } from '../../helper/randomHelper';\r\n\r\nimport { GuidSection } from '../../constants/guidSection';\r\n\r\n\r\ninterface IProps {\r\n    guid: string;\r\n}\r\n\r\nexport const Main2 = (props: IProps) => {\r\n    const randomSeed = getGuidSection(props.guid, GuidSection.MainImage);\r\n    const rando: number = randomFromSeed(randomSeed, maxPossibilities);\r\n\r\n    console.log('Main2', { rando });\r\n    const numImages = 3;\r\n    const imageIndex = getIndex(numImages, rando, maxPossibilities);\r\n    return (\r\n        <section id=\"main\" style={{ backgroundImage: `url(/assets/img/screen${imageIndex}.jpg)` }}>\r\n            <div className=\"mainGrid\">\r\n                <div className=\"item1\">\r\n                    <p>Procedurally generated Space Stations</p>\r\n                </div>\r\n                <div className=\"item2\"></div>\r\n                <div className=\"item3\"></div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport { randomFromSeed, getIndex } from '../../helper/randomHelper';\r\nimport { maxPossibilities, getGuidSection } from '../../helper/guidHelper';\r\n\r\nimport { GuidSection } from '../../constants/guidSection';\r\n\r\nimport { Main1 } from './main1';\r\nimport { Main2 } from './main2';\r\n\r\ninterface IProps {\r\n    guid: string;\r\n}\r\n\r\nexport const Main = (props: IProps) => {\r\n    const randomSeed = getGuidSection(props.guid, GuidSection.Main);\r\n    const rando: number = randomFromSeed(randomSeed, maxPossibilities);\r\n\r\n    console.log('Main', { rando });\r\n    const numPossibilities = 2;\r\n    const selectedIndex = getIndex(numPossibilities, rando, maxPossibilities);\r\n\r\n    switch (selectedIndex) {\r\n        case 0:\r\n        default:\r\n            return <Main1 {...props} />;\r\n        case 1:\r\n            return <Main2 {...props} />;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { randomGuid } from './helper/guidHelper';\r\n\r\nimport { Sidebar } from './components/sidebar/index';\r\nimport { Logo } from './components/logo/index';\r\nimport { Main } from './components/main/index';\r\n\r\ninterface IState {\r\n  guid: string\r\n}\r\n\r\nexport class App extends React.PureComponent<any, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      // guid: '000-000-000-000'\r\n      guid: `${randomGuid()}-${randomGuid()}-${randomGuid()}-${randomGuid()}`\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Sidebar guid={this.state.guid} />\r\n        <div className=\"content\">\r\n          <Logo guid={this.state.guid} />\r\n          <Main guid={this.state.guid} />\r\n\r\n          <section id=\"footer\">\r\n            <div className=\"container\">\r\n            </div>\r\n            <div id=\"copyright\">\r\n              <ul>\r\n                <li>&copy; Matter Flow</li>\r\n                <li>Created by: Avgust Stupin</li>\r\n                <li>Web Design: <a href=\"https://kurtlourens.com\">Kurt Lourens</a></li>\r\n              </ul>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n    if (isLocalhost) {\r\n      // This is running on localhost. Let's check if a service worker still exists or not.\r\n      checkValidServiceWorker(swUrl, config);\r\n\r\n      // Add some additional logging to localhost, pointing developers to the\r\n      // service worker/PWA documentation.\r\n      navigator.serviceWorker.ready.then(() => {\r\n        console.log(\r\n          'This web app is being served cache-first by a service ' +\r\n          'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n        );\r\n      });\r\n    } else {\r\n      // Is not localhost. Just register service worker\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n//https://medium.com/better-programming/let-users-know-when-you-have-updated-your-service-worker-in-create-react-app-b0c2701995b3","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\n// import './scss/base/main.scss';\r\nimport './scss/custom/main.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('matterFlow')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}